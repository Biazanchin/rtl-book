[{"content":"# Selecionando Elementos por Papel\n\nSelecionar elementos com base em seu papel é a forma preferida de testar elementos com a React Testing Library. Usamos seletores de papel em vez de métodos mais clássicos de encontrar elementos, como seletores CSS.\n\nARIA (Accessible Rich Internet Applications) é um conjunto de atributos que podem ser adicionados a elementos HTML para ajudar a tornar as aplicações web mais acessíveis para usuários com deficiências. Esses atributos fornecem informações adicionais sobre o propósito e comportamento de um elemento, que podem ser usadas por tecnologias assistivas, como leitores de tela, para melhorar a experiência do usuário.\n\nEmbora esses papéis ARIA sejam um tópico adicional para memorizar, nós, engenheiros, os utilizamos porque nos permitem escrever testes mais flexíveis. Em muitos casos, não importa se um elemento está apresentando texto em um elemento `h1` ou em um elemento `h3`. Ao encontrar elementos com base em seu papel, podemos fazer pequenas mudanças em um componente e não quebrar seu respectivo teste. Alguns engenheiros não se importam com essa flexibilidade. Se você não deseja usar papéis ARIA, sempre pode recorrer ao uso de seletores CSS padrão.\n\nAlguns elementos - nem todos - são 'implicitamente' (ou automaticamente) atribuídos um papel. Alguns dos papéis mais comumente usados podem ser encontrados no componente `RoleExample` abaixo.\n\n","type":"text","id":"ipckb"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>Contentinfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img alt=\"description\" /> Img\n      <input type=\"checkbox\" /> Checkbox\n      <input type=\"number\" /> Spinbutton\n      <input type=\"radio\" /> Radio\n      <input type=\"text\" /> Textbox\n      <li>Listitem</li>\n      <ul>Listgroup</ul>\n    </div>\n  );\n}\n\nrender(<RoleExample />);\n","type":"code","id":"6gs6v"},{"content":"Muitos elementos têm papéis que são fáceis de memorizar. Aqui estão alguns dos mais fáceis de lembrar:\n\n| Element               | Role    |\n|-----------------------|---------|\n| `a` with `href`       | link    |\n| `h1`, `h2`, ..., `h6` | heading |\n| `button`              | button  |\n| `img` with `alt`      | img     |\n\nOutros elementos podem ser um pouco mais desafiadores de lembrar. Por exemplo:\n| Element                      | Role        |\n|------------------------------|-------------|\n| `input` with `type=\"number\"` | spinbutton  |\n| `header`                     | banner      |\n| `footer`                     | contentinfo |","type":"text","id":"9l09k"},{"content":"test('can find elements by role', () => {\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'heading',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'radio',\n    'textbox',\n    'listitem',\n    'list'\n  ];\n\n  for (let role of roles) {\n    const el = screen.getByRole(role);\n\n    expect(el).toBeVisible();\n  }\n});","type":"code","id":"bttjn"},{"content":"## Nomes Acessíveis\n\nÀs vezes, múltiplos elementos do mesmo tipo são exibidos por um componente, e você precisará encontrar uma instância específica desse elemento. Você pode ser mais específico ao encontrar elementos com base em seu papel *e* seu nome acessível.\n\nO nome acessível da maioria dos elementos é o texto colocado entre as tags JSX. Por exemplo, o nome acessível de `<a href=\"/\">Home</a>` é `Home`.\n\nNo componente abaixo, dois elementos `button` são exibidos. A única diferença entre eles é o texto que contêm. Seus nomes acessíveis são `Submit` e `Cancel`, respectivamente.","type":"text","id":"g8ff7"},{"content":"function AccessibleName() {\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n    </div>\n  );\n}\nrender(<AccessibleName />);","type":"code","id":"cjrkl"},{"content":"## Selecionando por Nome Acessível\n\nElementos com um nome acessível definido podem ser selecionados passando um objeto de filtragem para o método `getByRole`. Exemplo abaixo.","type":"text","id":"kppqk"},{"content":"test('can select by accessible name', () => {\n  render(<AccessibleName />);\n\n  const submitButton = screen.getByRole('button', {\n    name: /submit/i\n  });\n  const cancelButton = screen.getByRole('button', {\n    name: /cancel/i\n  });\n\n  expect(submitButton).toBeVisible();\n  expect(cancelButton).toBeVisible();\n});","type":"code","id":"e6dv4"},{"content":"## Nomes Acessíveis para Inputs\n\nElementos auto-fechantes (também conhecidos como 'elementos void') como `input`, `img` e `br` não podem conter texto. Definir nomes acessíveis para eles é feito de forma diferente.\n\nPara definir um nome acessível para elementos `input` em particular, você pode associar o input a um `label`. O elemento `input` deve ter um prop `id` atribuído, e o `label` deve ter um prop `htmlFor` idêntico. Uma vez estabelecida essa ligação, o `input` pode ser selecionado usando o texto do `label` como nome acessível.","type":"text","id":"ionuj"},{"content":"function MoreNames() {\n  return (\n    <div>\n      <label htmlFor=\"email\">Email</label>\n      <input id=\"email\" />\n\n      <label htmlFor=\"search\">Search</label>\n      <input id=\"search\" />\n    </div>\n  );\n}\nrender(<MoreNames />);\n","type":"code","id":"9a5tc"},{"content":"test('shows an email and search input', () => {\n  render(<MoreNames />);\n\n  const emailInput = screen.getByRole('textbox', {\n    name: /email/i\n  });\n  const searchInput = screen.getByRole('textbox', {\n    name: /search/i\n  });\n\n  expect(emailInput).toBeVisible();\n  expect(searchInput).toBeVisible();\n});\n\n","type":"code","id":"sbtia"},{"content":"## Aplicando um Nome a Outros Elementos\n\nSe você estiver trabalhando com um elemento void (como `br` ou `img`), ou se estiver trabalhando com um elemento que não exibe texto puro, você pode aplicar um nome acessível usando o atributo `aria-label`.\n\nNo exemplo abaixo, dois elementos `button` estão sendo exibidos, mas não contêm texto tradicional. Em vez disso, eles exibem elementos `svg`, que são usados para mostrar ícones.\n\nPara selecionar esses elementos `button`, você pode aplicar um atributo `aria-label` a eles. Isso define seu nome acessível.","type":"text","id":"jft62"},{"content":"function IconButtons() {\n  return (\n    <div>\n      <button aria-label=\"sign in\">\n        <svg />\n      </button>\n\n      <button aria-label=\"sign out\">\n        <svg />\n      </button>\n    </div>\n  );\n}\nrender(<IconButtons />);","type":"code","id":"il5uj"},{"content":"test('find elements based on label', () => {\n  render(<IconButtons />);\n\n  const signInButton = screen.getByRole('button', {\n    name: /sign in/i\n  });\n  const signOutButton = screen.getByRole('button', {\n    name: /sign out/i\n  });\n\n  expect(signInButton).toBeVisible();\n  expect(signOutButton).toBeVisible();\n});","type":"code","id":"eogx3"}]